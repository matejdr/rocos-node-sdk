// source: teletubby.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.teletubby.v1.ComparisonOperation', null, global);
goog.exportSymbol('proto.teletubby.v1.ConfigAction', null, global);
goog.exportSymbol('proto.teletubby.v1.ConfigMessage', null, global);
goog.exportSymbol('proto.teletubby.v1.Heartbeat', null, global);
goog.exportSymbol('proto.teletubby.v1.LogicalOperation', null, global);
goog.exportSymbol('proto.teletubby.v1.Predicate', null, global);
goog.exportSymbol('proto.teletubby.v1.PredicateAttribute', null, global);
goog.exportSymbol('proto.teletubby.v1.Query', null, global);
goog.exportSymbol('proto.teletubby.v1.QueryOrPredicate', null, global);
goog.exportSymbol('proto.teletubby.v1.QueryOrPredicate.ContentCase', null, global);
goog.exportSymbol('proto.teletubby.v1.ReceiverGroupSubscribeOption', null, global);
goog.exportSymbol('proto.teletubby.v1.ReceiverGroupUnsubscribeOption', null, global);
goog.exportSymbol('proto.teletubby.v1.ReceiverStreamMessage', null, global);
goog.exportSymbol('proto.teletubby.v1.ReceiverStreamMessage.ContentCase', null, global);
goog.exportSymbol('proto.teletubby.v1.RegistrationMessage', null, global);
goog.exportSymbol('proto.teletubby.v1.ServiceStatusRequest', null, global);
goog.exportSymbol('proto.teletubby.v1.SubscribeOperation', null, global);
goog.exportSymbol('proto.teletubby.v1.SubscribeOption', null, global);
goog.exportSymbol('proto.teletubby.v1.SubscribeOption.ContentCase', null, global);
goog.exportSymbol('proto.teletubby.v1.TelemetryAckStatus', null, global);
goog.exportSymbol('proto.teletubby.v1.TelemetryAction', null, global);
goog.exportSymbol('proto.teletubby.v1.TelemetryAction.ContentCase', null, global);
goog.exportSymbol('proto.teletubby.v1.TelemetryMessage', null, global);
goog.exportSymbol('proto.teletubby.v1.TelemetryMessageAck', null, global);
goog.exportSymbol('proto.teletubby.v1.TelemetryQueryRequest', null, global);
goog.exportSymbol('proto.teletubby.v1.TelemetryRequest', null, global);
goog.exportSymbol('proto.teletubby.v1.TelemetryRequestAck', null, global);
goog.exportSymbol('proto.teletubby.v1.TelemetryStreamAck', null, global);
goog.exportSymbol('proto.teletubby.v1.TelemetryStreamMessage', null, global);
goog.exportSymbol('proto.teletubby.v1.TelemetryStreamMessage.ContentCase', null, global);
goog.exportSymbol('proto.teletubby.v1.UnsubscribeOperation', null, global);
goog.exportSymbol('proto.teletubby.v1.UnsubscribeOption', null, global);
goog.exportSymbol('proto.teletubby.v1.UnsubscribeOption.ContentCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.TelemetryMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teletubby.v1.TelemetryMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.TelemetryMessage.displayName = 'proto.teletubby.v1.TelemetryMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.ReceiverStreamMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.teletubby.v1.ReceiverStreamMessage.oneofGroups_);
};
goog.inherits(proto.teletubby.v1.ReceiverStreamMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.ReceiverStreamMessage.displayName = 'proto.teletubby.v1.ReceiverStreamMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.TelemetryStreamMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.teletubby.v1.TelemetryStreamMessage.oneofGroups_);
};
goog.inherits(proto.teletubby.v1.TelemetryStreamMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.TelemetryStreamMessage.displayName = 'proto.teletubby.v1.TelemetryStreamMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.TelemetryMessageAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teletubby.v1.TelemetryMessageAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.TelemetryMessageAck.displayName = 'proto.teletubby.v1.TelemetryMessageAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.TelemetryStreamAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teletubby.v1.TelemetryStreamAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.TelemetryStreamAck.displayName = 'proto.teletubby.v1.TelemetryStreamAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.ConfigMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.teletubby.v1.ConfigMessage.repeatedFields_, null);
};
goog.inherits(proto.teletubby.v1.ConfigMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.ConfigMessage.displayName = 'proto.teletubby.v1.ConfigMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.ConfigAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.teletubby.v1.ConfigAction.repeatedFields_, null);
};
goog.inherits(proto.teletubby.v1.ConfigAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.ConfigAction.displayName = 'proto.teletubby.v1.ConfigAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.TelemetryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.teletubby.v1.TelemetryRequest.repeatedFields_, null);
};
goog.inherits(proto.teletubby.v1.TelemetryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.TelemetryRequest.displayName = 'proto.teletubby.v1.TelemetryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.TelemetryQueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.teletubby.v1.TelemetryQueryRequest.repeatedFields_, null);
};
goog.inherits(proto.teletubby.v1.TelemetryQueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.TelemetryQueryRequest.displayName = 'proto.teletubby.v1.TelemetryQueryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.TelemetryAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.teletubby.v1.TelemetryAction.repeatedFields_, proto.teletubby.v1.TelemetryAction.oneofGroups_);
};
goog.inherits(proto.teletubby.v1.TelemetryAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.TelemetryAction.displayName = 'proto.teletubby.v1.TelemetryAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.SubscribeOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.teletubby.v1.SubscribeOperation.repeatedFields_, null);
};
goog.inherits(proto.teletubby.v1.SubscribeOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.SubscribeOperation.displayName = 'proto.teletubby.v1.SubscribeOperation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.UnsubscribeOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.teletubby.v1.UnsubscribeOperation.repeatedFields_, null);
};
goog.inherits(proto.teletubby.v1.UnsubscribeOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.UnsubscribeOperation.displayName = 'proto.teletubby.v1.UnsubscribeOperation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.SubscribeOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.teletubby.v1.SubscribeOption.oneofGroups_);
};
goog.inherits(proto.teletubby.v1.SubscribeOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.SubscribeOption.displayName = 'proto.teletubby.v1.SubscribeOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.UnsubscribeOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.teletubby.v1.UnsubscribeOption.oneofGroups_);
};
goog.inherits(proto.teletubby.v1.UnsubscribeOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.UnsubscribeOption.displayName = 'proto.teletubby.v1.UnsubscribeOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.ReceiverGroupSubscribeOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teletubby.v1.ReceiverGroupSubscribeOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.ReceiverGroupSubscribeOption.displayName = 'proto.teletubby.v1.ReceiverGroupSubscribeOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.ReceiverGroupUnsubscribeOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teletubby.v1.ReceiverGroupUnsubscribeOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.ReceiverGroupUnsubscribeOption.displayName = 'proto.teletubby.v1.ReceiverGroupUnsubscribeOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.TelemetryRequestAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teletubby.v1.TelemetryRequestAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.TelemetryRequestAck.displayName = 'proto.teletubby.v1.TelemetryRequestAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.RegistrationMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teletubby.v1.RegistrationMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.RegistrationMessage.displayName = 'proto.teletubby.v1.RegistrationMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.ServiceStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teletubby.v1.ServiceStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.ServiceStatusRequest.displayName = 'proto.teletubby.v1.ServiceStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.teletubby.v1.Query.repeatedFields_, null);
};
goog.inherits(proto.teletubby.v1.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.Query.displayName = 'proto.teletubby.v1.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.QueryOrPredicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.teletubby.v1.QueryOrPredicate.oneofGroups_);
};
goog.inherits(proto.teletubby.v1.QueryOrPredicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.QueryOrPredicate.displayName = 'proto.teletubby.v1.QueryOrPredicate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.Predicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teletubby.v1.Predicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.Predicate.displayName = 'proto.teletubby.v1.Predicate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teletubby.v1.Heartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teletubby.v1.Heartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teletubby.v1.Heartbeat.displayName = 'proto.teletubby.v1.Heartbeat';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.TelemetryMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.TelemetryMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.TelemetryMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payload: msg.getPayload_asB64(),
    callsign: jspb.Message.getFieldWithDefault(msg, 3, ""),
    created: jspb.Message.getFieldWithDefault(msg, 4, 0),
    seq: jspb.Message.getFieldWithDefault(msg, 5, 0),
    metaMap: (f = msg.getMetaMap()) ? f.toObject(includeInstance, undefined) : [],
    uid: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.TelemetryMessage}
 */
proto.teletubby.v1.TelemetryMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.TelemetryMessage;
  return proto.teletubby.v1.TelemetryMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.TelemetryMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.TelemetryMessage}
 */
proto.teletubby.v1.TelemetryMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallsign(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreated(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeq(value);
      break;
    case 6:
      var value = msg.getMetaMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.TelemetryMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.TelemetryMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.TelemetryMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCallsign();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreated();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMetaMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.teletubby.v1.TelemetryMessage.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.teletubby.v1.TelemetryMessage} returns this
 */
proto.teletubby.v1.TelemetryMessage.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.teletubby.v1.TelemetryMessage.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.teletubby.v1.TelemetryMessage.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.teletubby.v1.TelemetryMessage.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.teletubby.v1.TelemetryMessage} returns this
 */
proto.teletubby.v1.TelemetryMessage.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string callsign = 3;
 * @return {string}
 */
proto.teletubby.v1.TelemetryMessage.prototype.getCallsign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.teletubby.v1.TelemetryMessage} returns this
 */
proto.teletubby.v1.TelemetryMessage.prototype.setCallsign = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 created = 4;
 * @return {number}
 */
proto.teletubby.v1.TelemetryMessage.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.teletubby.v1.TelemetryMessage} returns this
 */
proto.teletubby.v1.TelemetryMessage.prototype.setCreated = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 seq = 5;
 * @return {number}
 */
proto.teletubby.v1.TelemetryMessage.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.teletubby.v1.TelemetryMessage} returns this
 */
proto.teletubby.v1.TelemetryMessage.prototype.setSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * map<string, string> meta = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.teletubby.v1.TelemetryMessage.prototype.getMetaMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.teletubby.v1.TelemetryMessage} returns this
 */
proto.teletubby.v1.TelemetryMessage.prototype.clearMetaMap = function() {
  this.getMetaMap().clear();
  return this;};


/**
 * optional string uid = 7;
 * @return {string}
 */
proto.teletubby.v1.TelemetryMessage.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.teletubby.v1.TelemetryMessage} returns this
 */
proto.teletubby.v1.TelemetryMessage.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.teletubby.v1.ReceiverStreamMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.teletubby.v1.ReceiverStreamMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  HEARTBEAT: 1,
  ACK: 2
};

/**
 * @return {proto.teletubby.v1.ReceiverStreamMessage.ContentCase}
 */
proto.teletubby.v1.ReceiverStreamMessage.prototype.getContentCase = function() {
  return /** @type {proto.teletubby.v1.ReceiverStreamMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.teletubby.v1.ReceiverStreamMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.ReceiverStreamMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.ReceiverStreamMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.ReceiverStreamMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.ReceiverStreamMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    heartbeat: (f = msg.getHeartbeat()) && proto.teletubby.v1.Heartbeat.toObject(includeInstance, f),
    ack: (f = msg.getAck()) && proto.teletubby.v1.TelemetryMessageAck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.ReceiverStreamMessage}
 */
proto.teletubby.v1.ReceiverStreamMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.ReceiverStreamMessage;
  return proto.teletubby.v1.ReceiverStreamMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.ReceiverStreamMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.ReceiverStreamMessage}
 */
proto.teletubby.v1.ReceiverStreamMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teletubby.v1.Heartbeat;
      reader.readMessage(value,proto.teletubby.v1.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 2:
      var value = new proto.teletubby.v1.TelemetryMessageAck;
      reader.readMessage(value,proto.teletubby.v1.TelemetryMessageAck.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.ReceiverStreamMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.ReceiverStreamMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.ReceiverStreamMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.ReceiverStreamMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.teletubby.v1.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.teletubby.v1.TelemetryMessageAck.serializeBinaryToWriter
    );
  }
};


/**
 * optional Heartbeat heartbeat = 1;
 * @return {?proto.teletubby.v1.Heartbeat}
 */
proto.teletubby.v1.ReceiverStreamMessage.prototype.getHeartbeat = function() {
  return /** @type{?proto.teletubby.v1.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.teletubby.v1.Heartbeat, 1));
};


/**
 * @param {?proto.teletubby.v1.Heartbeat|undefined} value
 * @return {!proto.teletubby.v1.ReceiverStreamMessage} returns this
*/
proto.teletubby.v1.ReceiverStreamMessage.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.teletubby.v1.ReceiverStreamMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teletubby.v1.ReceiverStreamMessage} returns this
 */
proto.teletubby.v1.ReceiverStreamMessage.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teletubby.v1.ReceiverStreamMessage.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TelemetryMessageAck ack = 2;
 * @return {?proto.teletubby.v1.TelemetryMessageAck}
 */
proto.teletubby.v1.ReceiverStreamMessage.prototype.getAck = function() {
  return /** @type{?proto.teletubby.v1.TelemetryMessageAck} */ (
    jspb.Message.getWrapperField(this, proto.teletubby.v1.TelemetryMessageAck, 2));
};


/**
 * @param {?proto.teletubby.v1.TelemetryMessageAck|undefined} value
 * @return {!proto.teletubby.v1.ReceiverStreamMessage} returns this
*/
proto.teletubby.v1.ReceiverStreamMessage.prototype.setAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.teletubby.v1.ReceiverStreamMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teletubby.v1.ReceiverStreamMessage} returns this
 */
proto.teletubby.v1.ReceiverStreamMessage.prototype.clearAck = function() {
  return this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teletubby.v1.ReceiverStreamMessage.prototype.hasAck = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.teletubby.v1.TelemetryStreamMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.teletubby.v1.TelemetryStreamMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  HEARTBEAT: 1,
  MESSAGE: 2
};

/**
 * @return {proto.teletubby.v1.TelemetryStreamMessage.ContentCase}
 */
proto.teletubby.v1.TelemetryStreamMessage.prototype.getContentCase = function() {
  return /** @type {proto.teletubby.v1.TelemetryStreamMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.teletubby.v1.TelemetryStreamMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.TelemetryStreamMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.TelemetryStreamMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.TelemetryStreamMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryStreamMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    heartbeat: (f = msg.getHeartbeat()) && proto.teletubby.v1.Heartbeat.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && proto.teletubby.v1.TelemetryMessage.toObject(includeInstance, f),
    isackable: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.TelemetryStreamMessage}
 */
proto.teletubby.v1.TelemetryStreamMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.TelemetryStreamMessage;
  return proto.teletubby.v1.TelemetryStreamMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.TelemetryStreamMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.TelemetryStreamMessage}
 */
proto.teletubby.v1.TelemetryStreamMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teletubby.v1.Heartbeat;
      reader.readMessage(value,proto.teletubby.v1.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 2:
      var value = new proto.teletubby.v1.TelemetryMessage;
      reader.readMessage(value,proto.teletubby.v1.TelemetryMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsackable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.TelemetryStreamMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.TelemetryStreamMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.TelemetryStreamMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryStreamMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.teletubby.v1.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.teletubby.v1.TelemetryMessage.serializeBinaryToWriter
    );
  }
  f = message.getIsackable();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional Heartbeat heartbeat = 1;
 * @return {?proto.teletubby.v1.Heartbeat}
 */
proto.teletubby.v1.TelemetryStreamMessage.prototype.getHeartbeat = function() {
  return /** @type{?proto.teletubby.v1.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.teletubby.v1.Heartbeat, 1));
};


/**
 * @param {?proto.teletubby.v1.Heartbeat|undefined} value
 * @return {!proto.teletubby.v1.TelemetryStreamMessage} returns this
*/
proto.teletubby.v1.TelemetryStreamMessage.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.teletubby.v1.TelemetryStreamMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teletubby.v1.TelemetryStreamMessage} returns this
 */
proto.teletubby.v1.TelemetryStreamMessage.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teletubby.v1.TelemetryStreamMessage.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TelemetryMessage message = 2;
 * @return {?proto.teletubby.v1.TelemetryMessage}
 */
proto.teletubby.v1.TelemetryStreamMessage.prototype.getMessage = function() {
  return /** @type{?proto.teletubby.v1.TelemetryMessage} */ (
    jspb.Message.getWrapperField(this, proto.teletubby.v1.TelemetryMessage, 2));
};


/**
 * @param {?proto.teletubby.v1.TelemetryMessage|undefined} value
 * @return {!proto.teletubby.v1.TelemetryStreamMessage} returns this
*/
proto.teletubby.v1.TelemetryStreamMessage.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.teletubby.v1.TelemetryStreamMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teletubby.v1.TelemetryStreamMessage} returns this
 */
proto.teletubby.v1.TelemetryStreamMessage.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teletubby.v1.TelemetryStreamMessage.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool isAckable = 3;
 * @return {boolean}
 */
proto.teletubby.v1.TelemetryStreamMessage.prototype.getIsackable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.teletubby.v1.TelemetryStreamMessage} returns this
 */
proto.teletubby.v1.TelemetryStreamMessage.prototype.setIsackable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.TelemetryMessageAck.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.TelemetryMessageAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.TelemetryMessageAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryMessageAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    noretry: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.TelemetryMessageAck}
 */
proto.teletubby.v1.TelemetryMessageAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.TelemetryMessageAck;
  return proto.teletubby.v1.TelemetryMessageAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.TelemetryMessageAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.TelemetryMessageAck}
 */
proto.teletubby.v1.TelemetryMessageAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {!proto.teletubby.v1.TelemetryAckStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNoretry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.TelemetryMessageAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.TelemetryMessageAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.TelemetryMessageAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryMessageAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getNoretry();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.teletubby.v1.TelemetryMessageAck.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.teletubby.v1.TelemetryMessageAck} returns this
 */
proto.teletubby.v1.TelemetryMessageAck.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TelemetryAckStatus status = 2;
 * @return {!proto.teletubby.v1.TelemetryAckStatus}
 */
proto.teletubby.v1.TelemetryMessageAck.prototype.getStatus = function() {
  return /** @type {!proto.teletubby.v1.TelemetryAckStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.teletubby.v1.TelemetryAckStatus} value
 * @return {!proto.teletubby.v1.TelemetryMessageAck} returns this
 */
proto.teletubby.v1.TelemetryMessageAck.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool noRetry = 3;
 * @return {boolean}
 */
proto.teletubby.v1.TelemetryMessageAck.prototype.getNoretry = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.teletubby.v1.TelemetryMessageAck} returns this
 */
proto.teletubby.v1.TelemetryMessageAck.prototype.setNoretry = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.TelemetryStreamAck.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.TelemetryStreamAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.TelemetryStreamAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryStreamAck.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.TelemetryStreamAck}
 */
proto.teletubby.v1.TelemetryStreamAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.TelemetryStreamAck;
  return proto.teletubby.v1.TelemetryStreamAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.TelemetryStreamAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.TelemetryStreamAck}
 */
proto.teletubby.v1.TelemetryStreamAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.TelemetryStreamAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.TelemetryStreamAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.TelemetryStreamAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryStreamAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.teletubby.v1.ConfigMessage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.ConfigMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.ConfigMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.ConfigMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.ConfigMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestedactionsList: jspb.Message.toObjectList(msg.getRequestedactionsList(),
    proto.teletubby.v1.ConfigAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.ConfigMessage}
 */
proto.teletubby.v1.ConfigMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.ConfigMessage;
  return proto.teletubby.v1.ConfigMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.ConfigMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.ConfigMessage}
 */
proto.teletubby.v1.ConfigMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.teletubby.v1.ConfigAction;
      reader.readMessage(value,proto.teletubby.v1.ConfigAction.deserializeBinaryFromReader);
      msg.addRequestedactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.ConfigMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.ConfigMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.ConfigMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.ConfigMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestedactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.teletubby.v1.ConfigAction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConfigAction requestedActions = 2;
 * @return {!Array<!proto.teletubby.v1.ConfigAction>}
 */
proto.teletubby.v1.ConfigMessage.prototype.getRequestedactionsList = function() {
  return /** @type{!Array<!proto.teletubby.v1.ConfigAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.teletubby.v1.ConfigAction, 2));
};


/**
 * @param {!Array<!proto.teletubby.v1.ConfigAction>} value
 * @return {!proto.teletubby.v1.ConfigMessage} returns this
*/
proto.teletubby.v1.ConfigMessage.prototype.setRequestedactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.teletubby.v1.ConfigAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.teletubby.v1.ConfigAction}
 */
proto.teletubby.v1.ConfigMessage.prototype.addRequestedactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.teletubby.v1.ConfigAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.teletubby.v1.ConfigMessage} returns this
 */
proto.teletubby.v1.ConfigMessage.prototype.clearRequestedactionsList = function() {
  return this.setRequestedactionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.teletubby.v1.ConfigAction.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.ConfigAction.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.ConfigAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.ConfigAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.ConfigAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sourcesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.ConfigAction}
 */
proto.teletubby.v1.ConfigAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.ConfigAction;
  return proto.teletubby.v1.ConfigAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.ConfigAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.ConfigAction}
 */
proto.teletubby.v1.ConfigAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperation(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSources(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.ConfigAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.ConfigAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.ConfigAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.ConfigAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperation();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourcesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string operation = 1;
 * @return {string}
 */
proto.teletubby.v1.ConfigAction.prototype.getOperation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.teletubby.v1.ConfigAction} returns this
 */
proto.teletubby.v1.ConfigAction.prototype.setOperation = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string sources = 2;
 * @return {!Array<string>}
 */
proto.teletubby.v1.ConfigAction.prototype.getSourcesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.teletubby.v1.ConfigAction} returns this
 */
proto.teletubby.v1.ConfigAction.prototype.setSourcesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.teletubby.v1.ConfigAction} returns this
 */
proto.teletubby.v1.ConfigAction.prototype.addSources = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.teletubby.v1.ConfigAction} returns this
 */
proto.teletubby.v1.ConfigAction.prototype.clearSourcesList = function() {
  return this.setSourcesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.teletubby.v1.TelemetryRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.TelemetryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.TelemetryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.TelemetryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscriberid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestedactionsList: jspb.Message.toObjectList(msg.getRequestedactionsList(),
    proto.teletubby.v1.TelemetryAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.TelemetryRequest}
 */
proto.teletubby.v1.TelemetryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.TelemetryRequest;
  return proto.teletubby.v1.TelemetryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.TelemetryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.TelemetryRequest}
 */
proto.teletubby.v1.TelemetryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubscriberid(value);
      break;
    case 2:
      var value = new proto.teletubby.v1.TelemetryAction;
      reader.readMessage(value,proto.teletubby.v1.TelemetryAction.deserializeBinaryFromReader);
      msg.addRequestedactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.TelemetryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.TelemetryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.TelemetryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscriberid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestedactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.teletubby.v1.TelemetryAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional string subscriberId = 1;
 * @return {string}
 */
proto.teletubby.v1.TelemetryRequest.prototype.getSubscriberid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.teletubby.v1.TelemetryRequest} returns this
 */
proto.teletubby.v1.TelemetryRequest.prototype.setSubscriberid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated TelemetryAction requestedActions = 2;
 * @return {!Array<!proto.teletubby.v1.TelemetryAction>}
 */
proto.teletubby.v1.TelemetryRequest.prototype.getRequestedactionsList = function() {
  return /** @type{!Array<!proto.teletubby.v1.TelemetryAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.teletubby.v1.TelemetryAction, 2));
};


/**
 * @param {!Array<!proto.teletubby.v1.TelemetryAction>} value
 * @return {!proto.teletubby.v1.TelemetryRequest} returns this
*/
proto.teletubby.v1.TelemetryRequest.prototype.setRequestedactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.teletubby.v1.TelemetryAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.teletubby.v1.TelemetryAction}
 */
proto.teletubby.v1.TelemetryRequest.prototype.addRequestedactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.teletubby.v1.TelemetryAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.teletubby.v1.TelemetryRequest} returns this
 */
proto.teletubby.v1.TelemetryRequest.prototype.clearRequestedactionsList = function() {
  return this.setRequestedactionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.teletubby.v1.TelemetryQueryRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.TelemetryQueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.TelemetryQueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.TelemetryQueryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryQueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscriberid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    operation: jspb.Message.getFieldWithDefault(msg, 2, ""),
    callsignquery: (f = msg.getCallsignquery()) && proto.teletubby.v1.Query.toObject(includeInstance, f),
    sourcesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.TelemetryQueryRequest}
 */
proto.teletubby.v1.TelemetryQueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.TelemetryQueryRequest;
  return proto.teletubby.v1.TelemetryQueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.TelemetryQueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.TelemetryQueryRequest}
 */
proto.teletubby.v1.TelemetryQueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubscriberid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperation(value);
      break;
    case 3:
      var value = new proto.teletubby.v1.Query;
      reader.readMessage(value,proto.teletubby.v1.Query.deserializeBinaryFromReader);
      msg.setCallsignquery(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addSources(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.TelemetryQueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.TelemetryQueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.TelemetryQueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryQueryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscriberid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOperation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCallsignquery();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.teletubby.v1.Query.serializeBinaryToWriter
    );
  }
  f = message.getSourcesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string subscriberId = 1;
 * @return {string}
 */
proto.teletubby.v1.TelemetryQueryRequest.prototype.getSubscriberid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.teletubby.v1.TelemetryQueryRequest} returns this
 */
proto.teletubby.v1.TelemetryQueryRequest.prototype.setSubscriberid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string operation = 2;
 * @return {string}
 */
proto.teletubby.v1.TelemetryQueryRequest.prototype.getOperation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.teletubby.v1.TelemetryQueryRequest} returns this
 */
proto.teletubby.v1.TelemetryQueryRequest.prototype.setOperation = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Query callsignQuery = 3;
 * @return {?proto.teletubby.v1.Query}
 */
proto.teletubby.v1.TelemetryQueryRequest.prototype.getCallsignquery = function() {
  return /** @type{?proto.teletubby.v1.Query} */ (
    jspb.Message.getWrapperField(this, proto.teletubby.v1.Query, 3));
};


/**
 * @param {?proto.teletubby.v1.Query|undefined} value
 * @return {!proto.teletubby.v1.TelemetryQueryRequest} returns this
*/
proto.teletubby.v1.TelemetryQueryRequest.prototype.setCallsignquery = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teletubby.v1.TelemetryQueryRequest} returns this
 */
proto.teletubby.v1.TelemetryQueryRequest.prototype.clearCallsignquery = function() {
  return this.setCallsignquery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teletubby.v1.TelemetryQueryRequest.prototype.hasCallsignquery = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string sources = 4;
 * @return {!Array<string>}
 */
proto.teletubby.v1.TelemetryQueryRequest.prototype.getSourcesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.teletubby.v1.TelemetryQueryRequest} returns this
 */
proto.teletubby.v1.TelemetryQueryRequest.prototype.setSourcesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.teletubby.v1.TelemetryQueryRequest} returns this
 */
proto.teletubby.v1.TelemetryQueryRequest.prototype.addSources = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.teletubby.v1.TelemetryQueryRequest} returns this
 */
proto.teletubby.v1.TelemetryQueryRequest.prototype.clearSourcesList = function() {
  return this.setSourcesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.teletubby.v1.TelemetryAction.repeatedFields_ = [2,3];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.teletubby.v1.TelemetryAction.oneofGroups_ = [[4,5]];

/**
 * @enum {number}
 */
proto.teletubby.v1.TelemetryAction.ContentCase = {
  CONTENT_NOT_SET: 0,
  SUBSCRIBEOPERATION: 4,
  UNSUBSCRIBEOPERATION: 5
};

/**
 * @return {proto.teletubby.v1.TelemetryAction.ContentCase}
 */
proto.teletubby.v1.TelemetryAction.prototype.getContentCase = function() {
  return /** @type {proto.teletubby.v1.TelemetryAction.ContentCase} */(jspb.Message.computeOneofCase(this, proto.teletubby.v1.TelemetryAction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.TelemetryAction.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.TelemetryAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.TelemetryAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, ""),
    callsignsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    sourcesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    subscribeoperation: (f = msg.getSubscribeoperation()) && proto.teletubby.v1.SubscribeOperation.toObject(includeInstance, f),
    unsubscribeoperation: (f = msg.getUnsubscribeoperation()) && proto.teletubby.v1.UnsubscribeOperation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.TelemetryAction}
 */
proto.teletubby.v1.TelemetryAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.TelemetryAction;
  return proto.teletubby.v1.TelemetryAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.TelemetryAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.TelemetryAction}
 */
proto.teletubby.v1.TelemetryAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperation(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addCallsigns(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addSources(value);
      break;
    case 4:
      var value = new proto.teletubby.v1.SubscribeOperation;
      reader.readMessage(value,proto.teletubby.v1.SubscribeOperation.deserializeBinaryFromReader);
      msg.setSubscribeoperation(value);
      break;
    case 5:
      var value = new proto.teletubby.v1.UnsubscribeOperation;
      reader.readMessage(value,proto.teletubby.v1.UnsubscribeOperation.deserializeBinaryFromReader);
      msg.setUnsubscribeoperation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.TelemetryAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.TelemetryAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.TelemetryAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperation();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCallsignsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getSourcesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getSubscribeoperation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.teletubby.v1.SubscribeOperation.serializeBinaryToWriter
    );
  }
  f = message.getUnsubscribeoperation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.teletubby.v1.UnsubscribeOperation.serializeBinaryToWriter
    );
  }
};


/**
 * optional string operation = 1;
 * @return {string}
 */
proto.teletubby.v1.TelemetryAction.prototype.getOperation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.teletubby.v1.TelemetryAction} returns this
 */
proto.teletubby.v1.TelemetryAction.prototype.setOperation = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string callsigns = 2;
 * @return {!Array<string>}
 */
proto.teletubby.v1.TelemetryAction.prototype.getCallsignsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.teletubby.v1.TelemetryAction} returns this
 */
proto.teletubby.v1.TelemetryAction.prototype.setCallsignsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.teletubby.v1.TelemetryAction} returns this
 */
proto.teletubby.v1.TelemetryAction.prototype.addCallsigns = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.teletubby.v1.TelemetryAction} returns this
 */
proto.teletubby.v1.TelemetryAction.prototype.clearCallsignsList = function() {
  return this.setCallsignsList([]);
};


/**
 * repeated string sources = 3;
 * @return {!Array<string>}
 */
proto.teletubby.v1.TelemetryAction.prototype.getSourcesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.teletubby.v1.TelemetryAction} returns this
 */
proto.teletubby.v1.TelemetryAction.prototype.setSourcesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.teletubby.v1.TelemetryAction} returns this
 */
proto.teletubby.v1.TelemetryAction.prototype.addSources = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.teletubby.v1.TelemetryAction} returns this
 */
proto.teletubby.v1.TelemetryAction.prototype.clearSourcesList = function() {
  return this.setSourcesList([]);
};


/**
 * optional SubscribeOperation subscribeOperation = 4;
 * @return {?proto.teletubby.v1.SubscribeOperation}
 */
proto.teletubby.v1.TelemetryAction.prototype.getSubscribeoperation = function() {
  return /** @type{?proto.teletubby.v1.SubscribeOperation} */ (
    jspb.Message.getWrapperField(this, proto.teletubby.v1.SubscribeOperation, 4));
};


/**
 * @param {?proto.teletubby.v1.SubscribeOperation|undefined} value
 * @return {!proto.teletubby.v1.TelemetryAction} returns this
*/
proto.teletubby.v1.TelemetryAction.prototype.setSubscribeoperation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.teletubby.v1.TelemetryAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teletubby.v1.TelemetryAction} returns this
 */
proto.teletubby.v1.TelemetryAction.prototype.clearSubscribeoperation = function() {
  return this.setSubscribeoperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teletubby.v1.TelemetryAction.prototype.hasSubscribeoperation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UnsubscribeOperation unsubscribeOperation = 5;
 * @return {?proto.teletubby.v1.UnsubscribeOperation}
 */
proto.teletubby.v1.TelemetryAction.prototype.getUnsubscribeoperation = function() {
  return /** @type{?proto.teletubby.v1.UnsubscribeOperation} */ (
    jspb.Message.getWrapperField(this, proto.teletubby.v1.UnsubscribeOperation, 5));
};


/**
 * @param {?proto.teletubby.v1.UnsubscribeOperation|undefined} value
 * @return {!proto.teletubby.v1.TelemetryAction} returns this
*/
proto.teletubby.v1.TelemetryAction.prototype.setUnsubscribeoperation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.teletubby.v1.TelemetryAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teletubby.v1.TelemetryAction} returns this
 */
proto.teletubby.v1.TelemetryAction.prototype.clearUnsubscribeoperation = function() {
  return this.setUnsubscribeoperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teletubby.v1.TelemetryAction.prototype.hasUnsubscribeoperation = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.teletubby.v1.SubscribeOperation.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.SubscribeOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.SubscribeOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.SubscribeOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.SubscribeOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    optionsList: jspb.Message.toObjectList(msg.getOptionsList(),
    proto.teletubby.v1.SubscribeOption.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.SubscribeOperation}
 */
proto.teletubby.v1.SubscribeOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.SubscribeOperation;
  return proto.teletubby.v1.SubscribeOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.SubscribeOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.SubscribeOperation}
 */
proto.teletubby.v1.SubscribeOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teletubby.v1.SubscribeOption;
      reader.readMessage(value,proto.teletubby.v1.SubscribeOption.deserializeBinaryFromReader);
      msg.addOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.SubscribeOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.SubscribeOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.SubscribeOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.SubscribeOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.teletubby.v1.SubscribeOption.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SubscribeOption options = 1;
 * @return {!Array<!proto.teletubby.v1.SubscribeOption>}
 */
proto.teletubby.v1.SubscribeOperation.prototype.getOptionsList = function() {
  return /** @type{!Array<!proto.teletubby.v1.SubscribeOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.teletubby.v1.SubscribeOption, 1));
};


/**
 * @param {!Array<!proto.teletubby.v1.SubscribeOption>} value
 * @return {!proto.teletubby.v1.SubscribeOperation} returns this
*/
proto.teletubby.v1.SubscribeOperation.prototype.setOptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.teletubby.v1.SubscribeOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.teletubby.v1.SubscribeOption}
 */
proto.teletubby.v1.SubscribeOperation.prototype.addOptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.teletubby.v1.SubscribeOption, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.teletubby.v1.SubscribeOperation} returns this
 */
proto.teletubby.v1.SubscribeOperation.prototype.clearOptionsList = function() {
  return this.setOptionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.teletubby.v1.UnsubscribeOperation.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.UnsubscribeOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.UnsubscribeOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.UnsubscribeOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.UnsubscribeOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    optionsList: jspb.Message.toObjectList(msg.getOptionsList(),
    proto.teletubby.v1.UnsubscribeOption.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.UnsubscribeOperation}
 */
proto.teletubby.v1.UnsubscribeOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.UnsubscribeOperation;
  return proto.teletubby.v1.UnsubscribeOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.UnsubscribeOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.UnsubscribeOperation}
 */
proto.teletubby.v1.UnsubscribeOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teletubby.v1.UnsubscribeOption;
      reader.readMessage(value,proto.teletubby.v1.UnsubscribeOption.deserializeBinaryFromReader);
      msg.addOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.UnsubscribeOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.UnsubscribeOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.UnsubscribeOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.UnsubscribeOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.teletubby.v1.UnsubscribeOption.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UnsubscribeOption options = 1;
 * @return {!Array<!proto.teletubby.v1.UnsubscribeOption>}
 */
proto.teletubby.v1.UnsubscribeOperation.prototype.getOptionsList = function() {
  return /** @type{!Array<!proto.teletubby.v1.UnsubscribeOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.teletubby.v1.UnsubscribeOption, 1));
};


/**
 * @param {!Array<!proto.teletubby.v1.UnsubscribeOption>} value
 * @return {!proto.teletubby.v1.UnsubscribeOperation} returns this
*/
proto.teletubby.v1.UnsubscribeOperation.prototype.setOptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.teletubby.v1.UnsubscribeOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.teletubby.v1.UnsubscribeOption}
 */
proto.teletubby.v1.UnsubscribeOperation.prototype.addOptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.teletubby.v1.UnsubscribeOption, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.teletubby.v1.UnsubscribeOperation} returns this
 */
proto.teletubby.v1.UnsubscribeOperation.prototype.clearOptionsList = function() {
  return this.setOptionsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.teletubby.v1.SubscribeOption.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.teletubby.v1.SubscribeOption.ContentCase = {
  CONTENT_NOT_SET: 0,
  RECEIVERGROUPSUBSCRIBEOPTION: 1
};

/**
 * @return {proto.teletubby.v1.SubscribeOption.ContentCase}
 */
proto.teletubby.v1.SubscribeOption.prototype.getContentCase = function() {
  return /** @type {proto.teletubby.v1.SubscribeOption.ContentCase} */(jspb.Message.computeOneofCase(this, proto.teletubby.v1.SubscribeOption.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.SubscribeOption.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.SubscribeOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.SubscribeOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.SubscribeOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    receivergroupsubscribeoption: (f = msg.getReceivergroupsubscribeoption()) && proto.teletubby.v1.ReceiverGroupSubscribeOption.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.SubscribeOption}
 */
proto.teletubby.v1.SubscribeOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.SubscribeOption;
  return proto.teletubby.v1.SubscribeOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.SubscribeOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.SubscribeOption}
 */
proto.teletubby.v1.SubscribeOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teletubby.v1.ReceiverGroupSubscribeOption;
      reader.readMessage(value,proto.teletubby.v1.ReceiverGroupSubscribeOption.deserializeBinaryFromReader);
      msg.setReceivergroupsubscribeoption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.SubscribeOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.SubscribeOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.SubscribeOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.SubscribeOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceivergroupsubscribeoption();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.teletubby.v1.ReceiverGroupSubscribeOption.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReceiverGroupSubscribeOption receivergroupSubscribeOption = 1;
 * @return {?proto.teletubby.v1.ReceiverGroupSubscribeOption}
 */
proto.teletubby.v1.SubscribeOption.prototype.getReceivergroupsubscribeoption = function() {
  return /** @type{?proto.teletubby.v1.ReceiverGroupSubscribeOption} */ (
    jspb.Message.getWrapperField(this, proto.teletubby.v1.ReceiverGroupSubscribeOption, 1));
};


/**
 * @param {?proto.teletubby.v1.ReceiverGroupSubscribeOption|undefined} value
 * @return {!proto.teletubby.v1.SubscribeOption} returns this
*/
proto.teletubby.v1.SubscribeOption.prototype.setReceivergroupsubscribeoption = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.teletubby.v1.SubscribeOption.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teletubby.v1.SubscribeOption} returns this
 */
proto.teletubby.v1.SubscribeOption.prototype.clearReceivergroupsubscribeoption = function() {
  return this.setReceivergroupsubscribeoption(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teletubby.v1.SubscribeOption.prototype.hasReceivergroupsubscribeoption = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.teletubby.v1.UnsubscribeOption.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.teletubby.v1.UnsubscribeOption.ContentCase = {
  CONTENT_NOT_SET: 0,
  RECEIVERGROUPUNSUBSCRIBEOPTION: 1
};

/**
 * @return {proto.teletubby.v1.UnsubscribeOption.ContentCase}
 */
proto.teletubby.v1.UnsubscribeOption.prototype.getContentCase = function() {
  return /** @type {proto.teletubby.v1.UnsubscribeOption.ContentCase} */(jspb.Message.computeOneofCase(this, proto.teletubby.v1.UnsubscribeOption.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.UnsubscribeOption.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.UnsubscribeOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.UnsubscribeOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.UnsubscribeOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    receivergroupunsubscribeoption: (f = msg.getReceivergroupunsubscribeoption()) && proto.teletubby.v1.ReceiverGroupUnsubscribeOption.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.UnsubscribeOption}
 */
proto.teletubby.v1.UnsubscribeOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.UnsubscribeOption;
  return proto.teletubby.v1.UnsubscribeOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.UnsubscribeOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.UnsubscribeOption}
 */
proto.teletubby.v1.UnsubscribeOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teletubby.v1.ReceiverGroupUnsubscribeOption;
      reader.readMessage(value,proto.teletubby.v1.ReceiverGroupUnsubscribeOption.deserializeBinaryFromReader);
      msg.setReceivergroupunsubscribeoption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.UnsubscribeOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.UnsubscribeOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.UnsubscribeOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.UnsubscribeOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceivergroupunsubscribeoption();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.teletubby.v1.ReceiverGroupUnsubscribeOption.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReceiverGroupUnsubscribeOption receivergroupUnsubscribeOption = 1;
 * @return {?proto.teletubby.v1.ReceiverGroupUnsubscribeOption}
 */
proto.teletubby.v1.UnsubscribeOption.prototype.getReceivergroupunsubscribeoption = function() {
  return /** @type{?proto.teletubby.v1.ReceiverGroupUnsubscribeOption} */ (
    jspb.Message.getWrapperField(this, proto.teletubby.v1.ReceiverGroupUnsubscribeOption, 1));
};


/**
 * @param {?proto.teletubby.v1.ReceiverGroupUnsubscribeOption|undefined} value
 * @return {!proto.teletubby.v1.UnsubscribeOption} returns this
*/
proto.teletubby.v1.UnsubscribeOption.prototype.setReceivergroupunsubscribeoption = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.teletubby.v1.UnsubscribeOption.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teletubby.v1.UnsubscribeOption} returns this
 */
proto.teletubby.v1.UnsubscribeOption.prototype.clearReceivergroupunsubscribeoption = function() {
  return this.setReceivergroupunsubscribeoption(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teletubby.v1.UnsubscribeOption.prototype.hasReceivergroupunsubscribeoption = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.ReceiverGroupSubscribeOption.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.ReceiverGroupSubscribeOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.ReceiverGroupSubscribeOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.ReceiverGroupSubscribeOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    startposition: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.ReceiverGroupSubscribeOption}
 */
proto.teletubby.v1.ReceiverGroupSubscribeOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.ReceiverGroupSubscribeOption;
  return proto.teletubby.v1.ReceiverGroupSubscribeOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.ReceiverGroupSubscribeOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.ReceiverGroupSubscribeOption}
 */
proto.teletubby.v1.ReceiverGroupSubscribeOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartposition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.ReceiverGroupSubscribeOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.ReceiverGroupSubscribeOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.ReceiverGroupSubscribeOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.ReceiverGroupSubscribeOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartposition();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 startPosition = 1;
 * @return {number}
 */
proto.teletubby.v1.ReceiverGroupSubscribeOption.prototype.getStartposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.teletubby.v1.ReceiverGroupSubscribeOption} returns this
 */
proto.teletubby.v1.ReceiverGroupSubscribeOption.prototype.setStartposition = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.ReceiverGroupUnsubscribeOption.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.ReceiverGroupUnsubscribeOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.ReceiverGroupUnsubscribeOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.ReceiverGroupUnsubscribeOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    terminate: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.ReceiverGroupUnsubscribeOption}
 */
proto.teletubby.v1.ReceiverGroupUnsubscribeOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.ReceiverGroupUnsubscribeOption;
  return proto.teletubby.v1.ReceiverGroupUnsubscribeOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.ReceiverGroupUnsubscribeOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.ReceiverGroupUnsubscribeOption}
 */
proto.teletubby.v1.ReceiverGroupUnsubscribeOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTerminate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.ReceiverGroupUnsubscribeOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.ReceiverGroupUnsubscribeOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.ReceiverGroupUnsubscribeOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.ReceiverGroupUnsubscribeOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerminate();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool terminate = 1;
 * @return {boolean}
 */
proto.teletubby.v1.ReceiverGroupUnsubscribeOption.prototype.getTerminate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.teletubby.v1.ReceiverGroupUnsubscribeOption} returns this
 */
proto.teletubby.v1.ReceiverGroupUnsubscribeOption.prototype.setTerminate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.TelemetryRequestAck.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.TelemetryRequestAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.TelemetryRequestAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryRequestAck.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.TelemetryRequestAck}
 */
proto.teletubby.v1.TelemetryRequestAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.TelemetryRequestAck;
  return proto.teletubby.v1.TelemetryRequestAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.TelemetryRequestAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.TelemetryRequestAck}
 */
proto.teletubby.v1.TelemetryRequestAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.TelemetryRequestAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.TelemetryRequestAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.TelemetryRequestAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.TelemetryRequestAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.RegistrationMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.RegistrationMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.RegistrationMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.RegistrationMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.RegistrationMessage}
 */
proto.teletubby.v1.RegistrationMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.RegistrationMessage;
  return proto.teletubby.v1.RegistrationMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.RegistrationMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.RegistrationMessage}
 */
proto.teletubby.v1.RegistrationMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.RegistrationMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.RegistrationMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.RegistrationMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.RegistrationMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.ServiceStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.ServiceStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.ServiceStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.ServiceStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.ServiceStatusRequest}
 */
proto.teletubby.v1.ServiceStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.ServiceStatusRequest;
  return proto.teletubby.v1.ServiceStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.ServiceStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.ServiceStatusRequest}
 */
proto.teletubby.v1.ServiceStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.ServiceStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.ServiceStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.ServiceStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.ServiceStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.teletubby.v1.Query.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, 0),
    queryorpredicatesList: jspb.Message.toObjectList(msg.getQueryorpredicatesList(),
    proto.teletubby.v1.QueryOrPredicate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.Query}
 */
proto.teletubby.v1.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.Query;
  return proto.teletubby.v1.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.Query}
 */
proto.teletubby.v1.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.teletubby.v1.LogicalOperation} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 2:
      var value = new proto.teletubby.v1.QueryOrPredicate;
      reader.readMessage(value,proto.teletubby.v1.QueryOrPredicate.deserializeBinaryFromReader);
      msg.addQueryorpredicates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getQueryorpredicatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.teletubby.v1.QueryOrPredicate.serializeBinaryToWriter
    );
  }
};


/**
 * optional LogicalOperation operation = 1;
 * @return {!proto.teletubby.v1.LogicalOperation}
 */
proto.teletubby.v1.Query.prototype.getOperation = function() {
  return /** @type {!proto.teletubby.v1.LogicalOperation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.teletubby.v1.LogicalOperation} value
 * @return {!proto.teletubby.v1.Query} returns this
 */
proto.teletubby.v1.Query.prototype.setOperation = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated QueryOrPredicate queryOrPredicates = 2;
 * @return {!Array<!proto.teletubby.v1.QueryOrPredicate>}
 */
proto.teletubby.v1.Query.prototype.getQueryorpredicatesList = function() {
  return /** @type{!Array<!proto.teletubby.v1.QueryOrPredicate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.teletubby.v1.QueryOrPredicate, 2));
};


/**
 * @param {!Array<!proto.teletubby.v1.QueryOrPredicate>} value
 * @return {!proto.teletubby.v1.Query} returns this
*/
proto.teletubby.v1.Query.prototype.setQueryorpredicatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.teletubby.v1.QueryOrPredicate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.teletubby.v1.QueryOrPredicate}
 */
proto.teletubby.v1.Query.prototype.addQueryorpredicates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.teletubby.v1.QueryOrPredicate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.teletubby.v1.Query} returns this
 */
proto.teletubby.v1.Query.prototype.clearQueryorpredicatesList = function() {
  return this.setQueryorpredicatesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.teletubby.v1.QueryOrPredicate.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.teletubby.v1.QueryOrPredicate.ContentCase = {
  CONTENT_NOT_SET: 0,
  QUERY: 1,
  PREDICATE: 2
};

/**
 * @return {proto.teletubby.v1.QueryOrPredicate.ContentCase}
 */
proto.teletubby.v1.QueryOrPredicate.prototype.getContentCase = function() {
  return /** @type {proto.teletubby.v1.QueryOrPredicate.ContentCase} */(jspb.Message.computeOneofCase(this, proto.teletubby.v1.QueryOrPredicate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.QueryOrPredicate.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.QueryOrPredicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.QueryOrPredicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.QueryOrPredicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: (f = msg.getQuery()) && proto.teletubby.v1.Query.toObject(includeInstance, f),
    predicate: (f = msg.getPredicate()) && proto.teletubby.v1.Predicate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.QueryOrPredicate}
 */
proto.teletubby.v1.QueryOrPredicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.QueryOrPredicate;
  return proto.teletubby.v1.QueryOrPredicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.QueryOrPredicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.QueryOrPredicate}
 */
proto.teletubby.v1.QueryOrPredicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teletubby.v1.Query;
      reader.readMessage(value,proto.teletubby.v1.Query.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 2:
      var value = new proto.teletubby.v1.Predicate;
      reader.readMessage(value,proto.teletubby.v1.Predicate.deserializeBinaryFromReader);
      msg.setPredicate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.QueryOrPredicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.QueryOrPredicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.QueryOrPredicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.QueryOrPredicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.teletubby.v1.Query.serializeBinaryToWriter
    );
  }
  f = message.getPredicate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.teletubby.v1.Predicate.serializeBinaryToWriter
    );
  }
};


/**
 * optional Query query = 1;
 * @return {?proto.teletubby.v1.Query}
 */
proto.teletubby.v1.QueryOrPredicate.prototype.getQuery = function() {
  return /** @type{?proto.teletubby.v1.Query} */ (
    jspb.Message.getWrapperField(this, proto.teletubby.v1.Query, 1));
};


/**
 * @param {?proto.teletubby.v1.Query|undefined} value
 * @return {!proto.teletubby.v1.QueryOrPredicate} returns this
*/
proto.teletubby.v1.QueryOrPredicate.prototype.setQuery = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.teletubby.v1.QueryOrPredicate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teletubby.v1.QueryOrPredicate} returns this
 */
proto.teletubby.v1.QueryOrPredicate.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teletubby.v1.QueryOrPredicate.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Predicate predicate = 2;
 * @return {?proto.teletubby.v1.Predicate}
 */
proto.teletubby.v1.QueryOrPredicate.prototype.getPredicate = function() {
  return /** @type{?proto.teletubby.v1.Predicate} */ (
    jspb.Message.getWrapperField(this, proto.teletubby.v1.Predicate, 2));
};


/**
 * @param {?proto.teletubby.v1.Predicate|undefined} value
 * @return {!proto.teletubby.v1.QueryOrPredicate} returns this
*/
proto.teletubby.v1.QueryOrPredicate.prototype.setPredicate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.teletubby.v1.QueryOrPredicate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teletubby.v1.QueryOrPredicate} returns this
 */
proto.teletubby.v1.QueryOrPredicate.prototype.clearPredicate = function() {
  return this.setPredicate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teletubby.v1.QueryOrPredicate.prototype.hasPredicate = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.Predicate.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.Predicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.Predicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.Predicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    attribute: jspb.Message.getFieldWithDefault(msg, 1, 0),
    operation: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.Predicate}
 */
proto.teletubby.v1.Predicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.Predicate;
  return proto.teletubby.v1.Predicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.Predicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.Predicate}
 */
proto.teletubby.v1.Predicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.teletubby.v1.PredicateAttribute} */ (reader.readEnum());
      msg.setAttribute(value);
      break;
    case 2:
      var value = /** @type {!proto.teletubby.v1.ComparisonOperation} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.Predicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.Predicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.Predicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.Predicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttribute();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional PredicateAttribute attribute = 1;
 * @return {!proto.teletubby.v1.PredicateAttribute}
 */
proto.teletubby.v1.Predicate.prototype.getAttribute = function() {
  return /** @type {!proto.teletubby.v1.PredicateAttribute} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.teletubby.v1.PredicateAttribute} value
 * @return {!proto.teletubby.v1.Predicate} returns this
 */
proto.teletubby.v1.Predicate.prototype.setAttribute = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ComparisonOperation operation = 2;
 * @return {!proto.teletubby.v1.ComparisonOperation}
 */
proto.teletubby.v1.Predicate.prototype.getOperation = function() {
  return /** @type {!proto.teletubby.v1.ComparisonOperation} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.teletubby.v1.ComparisonOperation} value
 * @return {!proto.teletubby.v1.Predicate} returns this
 */
proto.teletubby.v1.Predicate.prototype.setOperation = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.teletubby.v1.Predicate.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.teletubby.v1.Predicate} returns this
 */
proto.teletubby.v1.Predicate.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teletubby.v1.Heartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.teletubby.v1.Heartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teletubby.v1.Heartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.Heartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teletubby.v1.Heartbeat}
 */
proto.teletubby.v1.Heartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teletubby.v1.Heartbeat;
  return proto.teletubby.v1.Heartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teletubby.v1.Heartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teletubby.v1.Heartbeat}
 */
proto.teletubby.v1.Heartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teletubby.v1.Heartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teletubby.v1.Heartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teletubby.v1.Heartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teletubby.v1.Heartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.teletubby.v1.TelemetryAckStatus = {
  OK: 0,
  REJECT: 1
};

/**
 * @enum {number}
 */
proto.teletubby.v1.LogicalOperation = {
  OR: 0
};

/**
 * @enum {number}
 */
proto.teletubby.v1.ComparisonOperation = {
  EQUAL: 0
};

/**
 * @enum {number}
 */
proto.teletubby.v1.PredicateAttribute = {
  TAG: 0
};

goog.object.extend(exports, proto.teletubby.v1);
